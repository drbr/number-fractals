{"version":3,"sources":["plugins/PluginManager.tsx","plugins/NumberLanguagePlugins.tsx","utils/generateId.tsx","components/Dropdown.tsx","components/PluginSelectorDropdown.tsx","InputArea.tsx","plugins/SortPlugins.tsx","graphPlugins/ReactCharts.tsx","plugins/GraphPlugins.tsx","graphPlugins/ChartJs.tsx","components/WordList.tsx","numberLanguage/generateWordsForNumber.tsx","numberLanguage/Range.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PluginManager","registeredPlugins","plugins","this","registerPlugins","plugin","getPluginByKey","registrationKey","Error","push","p","registerPlugin","key","find","NumberLanguagePluginManager","userVisibleName","generateEachNumberWord","toWords","x","writtenNumber","lang","de","pl","String","nextId","generateUniqueId","Dropdown","props","uniqueId","React","id","label","aria-labelledby","onChange","event","target","value","selectedValue","items","map","item","name","PluginSelectorDropdown","pluginManager","selectedPlugin","dropdownItems","useMemo","getPluginsInOrder","setSelectedPlugin","useCallback","InputArea","startLabelId","endLabelId","showListId","className","languagePlugins","currentLanguagePlugin","setCurrentLanguagePlugin","type","step","rangeStart","setRangeStart","Number","rangeEnd","setRangeEnd","sortPlugins","currentSortPlugin","setCurrentSortPlugin","graphPlugins","currentGraphPlugin","setCurrentGraphPlugin","checked","showList","setShowList","SortPluginManager","sortItemsInPlace","sort","a","z","numberAsWords","localeCompare","GraphPluginManager","graphComponent","values","numberWords","d","numberValues","chartData","labels","datasets","backgroundColor","data","minBarLength","tooltipOptions","callbacks","tooltipItem","word","index","options","scales","yAxes","ticks","beginAtZero","animation","duration","tooltips","maintainAspectRatio","hover","animationDuration","WordList","display","WordListDisplay","listItems","sortedWordsForNumbers","v","generateWordsForNumbers","rangeParams","convertEachNumber","params","start","end","Array","from","length","_","i","range","App","words","graphElement","inputAreaProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75971edf.chunk.js","sourcesContent":["/** The type from which all plugins must extend */\nexport type BasePlugin = {\n  registrationKey: string;\n  userVisibleName: string;\n};\n\nexport class PluginManager<P extends BasePlugin> {\n  private registeredPlugins: P[] = [];\n\n  /**\n   * Creates a new plugin manager, optionally registering the given plugins.\n   * @param plugins\n   */\n  public constructor(...plugins: P[]) {\n    if (plugins) {\n      this.registerPlugins(plugins);\n    }\n  }\n\n  /**\n   * Registers a plugin with this manager, appending it to the end of the list.\n   * @param name Name of the plugin. Should be unique to all the plugins in this manager\n   * @param plugin The plugin\n   */\n  public registerPlugin(plugin: P): void {\n    if (this.getPluginByKey(plugin.registrationKey)) {\n      throw new Error(\n        `Cannot register plugin; a plugin with name ${plugin.registrationKey} has already been registered.`\n      );\n    }\n    this.registeredPlugins.push({ ...plugin });\n  }\n\n  /**\n   * Registers multiple plugins, as if `registerPlugin` were called multiple times.\n   * @param plugins\n   */\n  public registerPlugins(plugins: P[]): void {\n    for (const p of plugins) {\n      this.registerPlugin(p);\n    }\n  }\n\n  /**\n   * Returns the names of all registered plugins, in the order in which they were registered\n   */\n  public getPluginsInOrder(): ReadonlyArray<P> {\n    return this.registeredPlugins;\n  }\n\n  public getPluginByKey(key: string): P | undefined {\n    const plugin = this.registeredPlugins.find(\n      (p) => p.registrationKey === key\n    );\n    return plugin;\n  }\n}\n","import { PluginManager, BasePlugin } from \"./PluginManager\";\nimport writtenNumber from \"written-number\";\nimport { toWords } from \"number-to-words\";\nimport { de, pl } from \"in-words\";\n\nexport type NumberWithWord = {\n  value: number;\n  numberAsWords: string;\n};\n\nexport type GenerateEachNumberWord = (num: number) => string;\n\n/** Return the numbers from start to end, inclusive, in the language. */\nexport interface NumberLanguagePlugin extends BasePlugin {\n  generateEachNumberWord: GenerateEachNumberWord;\n}\n\nexport const NumberLanguagePluginManager = new PluginManager<\n  NumberLanguagePlugin\n>(\n  {\n    registrationKey: \"english (n2w)\",\n    userVisibleName: \"English (number-to-words)\",\n    generateEachNumberWord: toWords,\n  },\n  {\n    registrationKey: \"english (wn)\",\n    userVisibleName: \"English (written-number)\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"en\" }),\n  },\n  {\n    registrationKey: \"arabic\",\n    userVisibleName: \"Arabic\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"ar\" }),\n  },\n  {\n    registrationKey: \"esperanto\",\n    userVisibleName: \"Esperanto\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"eo\" }),\n  },\n  {\n    registrationKey: \"french\",\n    userVisibleName: \"French\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"fr\" }),\n  },\n  {\n    registrationKey: \"german\",\n    userVisibleName: \"German\",\n    generateEachNumberWord: de,\n  },\n  {\n    registrationKey: \"indonesian\",\n    userVisibleName: \"Indonesian\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"id\" }),\n  },\n  {\n    registrationKey: \"polish\",\n    userVisibleName: \"Polish\",\n    generateEachNumberWord: pl,\n  },\n  {\n    registrationKey: \"portuguese\",\n    userVisibleName: \"Portuguese\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"ptPT\" }),\n  },\n  {\n    registrationKey: \"spanish\",\n    userVisibleName: \"Spanish\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"es\" }),\n  },\n  {\n    registrationKey: \"turkish\",\n    userVisibleName: \"Turkish\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"tr\" }),\n  },\n  {\n    registrationKey: \"vietnamese\",\n    userVisibleName: \"Vietnamese\",\n    generateEachNumberWord: (x) => writtenNumber(x, { lang: \"vi\" }),\n  },\n  {\n    registrationKey: \"arabic-numerals\",\n    userVisibleName: \"Arabic Numerals\",\n    generateEachNumberWord: String,\n  }\n);\n","let nextId = 0;\n\nexport function generateUniqueId() {\n  return \"\" + nextId++;\n}\n","import * as React from \"react\";\nimport { generateUniqueId } from \"../utils/generateId\";\n\nexport type DropdownItem = {\n  value: string;\n  name: string;\n};\n\nexport type DropdownProps = {\n  label: string;\n  items: ReadonlyArray<DropdownItem>;\n  selectedValue: string;\n  onChange: (value: string) => void;\n};\n\nexport function Dropdown(props: DropdownProps) {\n  const uniqueId = React.useMemo(() => generateUniqueId(), []);\n\n  return (\n    <div>\n      <label id={uniqueId}>{props.label}</label>\n      <select\n        aria-labelledby={uniqueId}\n        onChange={(event) => props.onChange(event.target.value)}\n        value={props.selectedValue}\n      >\n        {props.items.map((item) => (\n          <option value={item.value} key={item.value}>\n            {item.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import { BasePlugin, PluginManager } from \"../plugins/PluginManager\";\nimport React from \"react\";\nimport { Dropdown } from \"./Dropdown\";\n\nexport type PluginSelectorDropdown<P extends BasePlugin> = {\n  label: string;\n  pluginManager: PluginManager<P>;\n  selectedPlugin: P;\n  onChange: (plugin: P) => void;\n};\n\nexport function PluginSelectorDropdown<P extends BasePlugin>(\n  props: PluginSelectorDropdown<P>\n) {\n  const { pluginManager, selectedPlugin, onChange } = props;\n\n  const dropdownItems = React.useMemo(() => {\n    return pluginManager.getPluginsInOrder().map((p) => ({\n      value: p.registrationKey,\n      name: p.userVisibleName,\n    }));\n  }, [pluginManager]);\n\n  const setSelectedPlugin = React.useCallback(\n    (key: string) => onChange(pluginManager.getPluginByKey(key)!),\n    [onChange, pluginManager]\n  );\n\n  return (\n    <Dropdown\n      label={props.label}\n      items={dropdownItems}\n      selectedValue={selectedPlugin.registrationKey}\n      onChange={setSelectedPlugin}\n    />\n  );\n}\n","import * as React from \"react\";\nimport { PluginSelectorDropdown } from \"./components/PluginSelectorDropdown\";\nimport {\n  NumberLanguagePluginManager,\n  NumberLanguagePlugin,\n} from \"./plugins/NumberLanguagePlugins\";\nimport { generateUniqueId } from \"./utils/generateId\";\nimport { SortPlugin, SortPluginManager } from \"./plugins/SortPlugins\";\nimport { GraphPluginManager, GraphPlugin } from \"./plugins/GraphPlugins\";\n\nexport type InputAreaProps = {\n  languagePlugins: typeof NumberLanguagePluginManager;\n  currentLanguagePlugin: NumberLanguagePlugin;\n  setCurrentLanguagePlugin: React.Dispatch<\n    React.SetStateAction<NumberLanguagePlugin>\n  >;\n  sortPlugins: typeof SortPluginManager;\n  currentSortPlugin: SortPlugin;\n  setCurrentSortPlugin: React.Dispatch<React.SetStateAction<SortPlugin>>;\n  graphPlugins: typeof GraphPluginManager;\n  currentGraphPlugin: GraphPlugin;\n  setCurrentGraphPlugin: React.Dispatch<React.SetStateAction<GraphPlugin>>;\n  rangeStart: number;\n  setRangeStart: React.Dispatch<React.SetStateAction<number>>;\n  rangeEnd: number;\n  setRangeEnd: React.Dispatch<React.SetStateAction<number>>;\n  showList: boolean;\n  setShowList: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport function InputArea(props: InputAreaProps) {\n  const startLabelId = React.useMemo(() => generateUniqueId(), []);\n  const endLabelId = React.useMemo(() => generateUniqueId(), []);\n  const showListId = React.useMemo(() => generateUniqueId(), []);\n\n  return (\n    <div className=\"Selectors\">\n      <PluginSelectorDropdown\n        label=\"Language: \"\n        pluginManager={props.languagePlugins}\n        selectedPlugin={props.currentLanguagePlugin}\n        onChange={props.setCurrentLanguagePlugin}\n      />\n\n      <div>\n        <label id={startLabelId}>Start value: </label>\n        <input\n          aria-labelledby={startLabelId}\n          type=\"number\"\n          step={1}\n          value={props.rangeStart}\n          onChange={(event) => props.setRangeStart(Number(event.target.value))}\n        />\n      </div>\n\n      <div>\n        <label id={endLabelId}>End value: </label>\n        <input\n          aria-labelledby={endLabelId}\n          type=\"number\"\n          step={10}\n          value={props.rangeEnd}\n          onChange={(event) => props.setRangeEnd(Number(event.target.value))}\n        />\n      </div>\n\n      <PluginSelectorDropdown\n        label=\"Sort: \"\n        pluginManager={props.sortPlugins}\n        selectedPlugin={props.currentSortPlugin}\n        onChange={props.setCurrentSortPlugin}\n      />\n\n      <PluginSelectorDropdown\n        label=\"Graph library: \"\n        pluginManager={props.graphPlugins}\n        selectedPlugin={props.currentGraphPlugin}\n        onChange={props.setCurrentGraphPlugin}\n      />\n\n      <div>\n        <label id={showListId}>Show list: </label>\n        <input\n          type=\"checkbox\"\n          checked={props.showList}\n          onChange={(event) => props.setShowList(event.target.checked)}\n        />\n      </div>\n    </div>\n  );\n}\n","import { BasePlugin, PluginManager } from \"./PluginManager\";\nimport { NumberWithWord } from \"./NumberLanguagePlugins\";\n\nexport interface SortPlugin extends BasePlugin {\n  sortItemsInPlace: (items: NumberWithWord[]) => NumberWithWord[];\n}\n\nexport const SortPluginManager = new PluginManager<SortPlugin>(\n  {\n    registrationKey: \"asc\",\n    userVisibleName: \"Ascending\",\n    sortItemsInPlace: sortAscending,\n  },\n  {\n    registrationKey: \"desc\",\n    userVisibleName: \"Descending\",\n    sortItemsInPlace: sortDescending,\n  }\n);\n\nfunction sortAscending(items: NumberWithWord[]) {\n  return items.sort((a, z) => a.numberAsWords.localeCompare(z.numberAsWords));\n}\n\nfunction sortDescending(items: NumberWithWord[]) {\n  return items.sort((a, z) => z.numberAsWords.localeCompare(a.numberAsWords));\n}\n","import * as React from \"react\";\nimport { GraphProps } from \"../plugins/GraphPlugins\";\n\nexport const GraphWithReactCharts: React.FC<GraphProps> = function GraphWithReactCharts() {\n  return <>react-charts, sadly, does not support Typescript!</>;\n};\n","import { NumberWithWord } from \"./NumberLanguagePlugins\";\nimport { BasePlugin, PluginManager } from \"./PluginManager\";\nimport { GraphWithReactCharts } from \"../graphPlugins/ReactCharts\";\nimport { GraphWithChartJs } from \"../graphPlugins/ChartJs\";\n\nexport type GraphProps = {\n  values: ReadonlyArray<NumberWithWord>;\n};\n\nexport interface GraphPlugin extends BasePlugin {\n  graphComponent: React.FC<GraphProps>;\n}\n\n/*\n * Even more awesome chart library ideas here:\n * https://github.com/zingchart/awesome-charting\n */\n\nexport const GraphPluginManager = new PluginManager<GraphPlugin>(\n  {\n    registrationKey: \"react-charts-js\",\n    userVisibleName: \"React Chart.js\",\n    graphComponent: GraphWithChartJs,\n  },\n  {\n    registrationKey: \"react-charts\",\n    userVisibleName: \"react-charts (TanStack)\",\n    graphComponent: GraphWithReactCharts,\n  }\n);\n","import * as React from \"react\";\nimport { GraphProps } from \"../plugins/GraphPlugins\";\nimport { Bar } from \"react-chartjs-2\";\n\nexport const GraphWithChartJs: React.FC<GraphProps> = React.memo(\n  function GraphWithReactCharts({ values }) {\n    const numberWords = values.map((d) => d.numberAsWords);\n    const numberValues = values.map((d) => d.value);\n\n    const chartData = {\n      labels: numberValues,\n      datasets: [\n        {\n          label: \"Numeric value\",\n          backgroundColor: \"#A456CB\",\n          data: numberValues,\n          minBarLength: 10,\n        },\n      ],\n    };\n\n    const axisOptions = {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    };\n\n    const animationOptions = {\n      duration: 0,\n    };\n\n    const tooltipOptions = {\n      callbacks: {\n        label: (tooltipItem: { index: number }) => {\n          const word = numberWords[tooltipItem.index];\n          return `${word}`;\n        },\n      },\n    };\n\n    return (\n      <Bar\n        data={chartData}\n        options={{\n          scales: axisOptions,\n          animation: animationOptions,\n          tooltips: tooltipOptions,\n          maintainAspectRatio: false,\n          hover: { animationDuration: 50 },\n        }}\n      />\n    );\n  }\n);\n","import * as React from \"react\";\nimport { NumberWithWord } from \"../plugins/NumberLanguagePlugins\";\n\nexport type WordListProps = {\n  readonly display: boolean;\n  readonly sortedWordsForNumbers: NumberWithWord[];\n};\n\nexport function WordList(props: WordListProps) {\n  if (!props.display) return null;\n  return <WordListDisplay {...props} />;\n}\n\nfunction WordListDisplay(props: WordListProps) {\n  const listItems = React.useMemo(\n    () =>\n      props.sortedWordsForNumbers.map((v) => (\n        <ul key={v.value}>\n          {v.value}: {v.numberAsWords}\n        </ul>\n      )),\n    [props.sortedWordsForNumbers]\n  );\n\n  return (\n    <div className=\"List\">\n      Generated number words:\n      {listItems}\n    </div>\n  );\n}\n","import range, { RangeParams } from \"./Range\";\nimport {\n  GenerateEachNumberWord,\n  NumberWithWord,\n} from \"../plugins/NumberLanguagePlugins\";\n\nexport function generateWordsForNumbers(\n  rangeParams: RangeParams,\n  convertEachNumber: GenerateEachNumberWord\n): NumberWithWord[] {\n  const numbers = range(rangeParams);\n  return numbers.map((x) => ({\n    value: x,\n    numberAsWords: convertEachNumber(x),\n  }));\n}\n","export type RangeParams = {\n  start: number;\n  end: number;\n};\n\nexport default function range(params: RangeParams): number[] {\n  const { start, end } = params;\n  return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n}\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { NumberLanguagePluginManager } from \"./plugins/NumberLanguagePlugins\";\nimport { InputArea, InputAreaProps } from \"./InputArea\";\nimport { SortPluginManager } from \"./plugins/SortPlugins\";\nimport { GraphPluginManager } from \"./plugins/GraphPlugins\";\nimport { WordList } from \"./components/WordList\";\nimport { generateWordsForNumbers } from \"./numberLanguage/generateWordsForNumber\";\n\nconst languagePlugins = NumberLanguagePluginManager;\nconst sortPlugins = SortPluginManager;\nconst graphPlugins = GraphPluginManager;\n\nconst initialRangeStart = 1;\nconst initialRangeEnd = 100;\n\nexport function App() {\n  const [rangeStart, setRangeStart] = React.useState(initialRangeStart);\n  const [rangeEnd, setRangeEnd] = React.useState(initialRangeEnd);\n  const [showList, setShowList] = React.useState(true);\n\n  const [currentLanguagePlugin, setCurrentLanguagePlugin] = React.useState(\n    languagePlugins.getPluginsInOrder()[0]\n  );\n\n  const [currentSortPlugin, setCurrentSortPlugin] = React.useState(\n    sortPlugins.getPluginsInOrder()[0]\n  );\n\n  const [currentGraphPlugin, setCurrentGraphPlugin] = React.useState(\n    graphPlugins.getPluginsInOrder()[0]\n  );\n\n  const sortedWordsForNumbers = React.useMemo(() => {\n    const words = generateWordsForNumbers(\n      {\n        start: rangeStart,\n        end: rangeEnd,\n      },\n      currentLanguagePlugin.generateEachNumberWord\n    );\n    return currentSortPlugin.sortItemsInPlace(words);\n  }, [currentLanguagePlugin, rangeStart, rangeEnd, currentSortPlugin]);\n\n  const graphElement = React.useMemo(\n    () =>\n      React.createElement(currentGraphPlugin.graphComponent, {\n        values: sortedWordsForNumbers,\n      }),\n    [currentGraphPlugin, sortedWordsForNumbers]\n  );\n\n  // React Hooks Linter seems to not recognize JSX component names as things\n  // that could change. Is this legitimate??\n  /*\n  const graphElement2 = React.useMemo(\n    () => <currentGraphPlugin.graphComponent values={sortedWordsForNumbers} />,\n    [currentGraphPlugin, sortedWordsForNumbers]\n  );\n\n  const GraphElement3Component = currentGraphPlugin.graphComponent;\n  const graphElement3 = React.useMemo(\n    () => <GraphElement3Component values={sortedWordsForNumbers} />,\n    [GraphElement3Component, sortedWordsForNumbers]\n  );\n  */\n\n  const inputAreaProps: InputAreaProps = {\n    languagePlugins,\n    currentLanguagePlugin,\n    setCurrentLanguagePlugin,\n    sortPlugins,\n    currentSortPlugin,\n    setCurrentSortPlugin,\n    graphPlugins,\n    currentGraphPlugin,\n    setCurrentGraphPlugin,\n    rangeStart,\n    setRangeStart,\n    rangeEnd,\n    setRangeEnd,\n    showList,\n    setShowList,\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"InputsSection\">\n        <InputArea {...inputAreaProps} />\n\n        <div className=\"Chosen\">\n          Chosen selections:\n          <ul>\n            <li>Language: {currentLanguagePlugin.userVisibleName}</li>\n            <li>\n              Number range: [ {rangeStart}, {rangeEnd} ]\n            </li>\n            <li>Sort: {currentSortPlugin.userVisibleName}</li>\n            <li>Graph library: {currentGraphPlugin.userVisibleName}</li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"Results\">\n        <WordList\n          sortedWordsForNumbers={sortedWordsForNumbers}\n          display={showList}\n        />\n        <div className=\"Graph\">{graphElement}</div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}